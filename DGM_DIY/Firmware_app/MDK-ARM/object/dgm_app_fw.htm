<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\object\dgm_app_fw.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\object\dgm_app_fw.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Nov 17 23:03:44 2024
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ADC0_1_IRQHandler &rArr; MCT_high_frequency_task &rArr; CALIBRATION_loop &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">CAN0_EWMC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from gd32c10x_it.o(i.ADC0_1_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32c10x_it.o(i.BusFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from gd32c10x_it.o(i.CAN0_RX0_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[48]">CAN1_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[46]">CAN1_RX0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[47]">CAN1_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[45]">CAN1_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32c10x_it.o(i.DebugMon_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32c10x_it.o(i.HardFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32c10x_it.o(i.MemManage_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32c10x_it.o(i.NMI_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32c10x_it.o(i.PendSV_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32c10x_it.o(i.SVC_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_gd32c10x.o(i.SystemInit) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from gd32c10x_it.o(i.TIMER1_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[49]">USBFS_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32c10x_it.o(i.UsageFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[4d]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[130]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[131]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_cogging_map
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_loop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_plan
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_plan
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[134]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[53]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[59]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nearbyintf
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[60]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[109]"></a>__ARM_dcmp4</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
</UL>

<P><STRONG><a name="[137]"></a>_dcmp4</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dcmp4.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nearbyintf
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[139]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[13a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32c10x_it.o(i.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ADC0_1_IRQHandler &rArr; MCT_high_frequency_task &rArr; CALIBRATION_loop &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ANTICOGGING_end</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, anticogging.o(i.ANTICOGGING_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ANTICOGGING_end &rArr; USR_CONFIG_set_default_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
</UL>

<P><STRONG><a name="[73]"></a>ANTICOGGING_loop</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, anticogging.o(i.ANTICOGGING_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ANTICOGGING_loop &rArr; MCT_set_state &rArr; FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_anticogging_report
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nearbyintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[77]"></a>ANTICOGGING_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, anticogging.o(i.ANTICOGGING_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ANTICOGGING_start &rArr; USR_CONFIG_set_default_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_state
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CALIBRATION_end</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, calibration.o(i.CALIBRATION_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CALIBRATION_end &rArr; USR_CONFIG_read_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_cogging_map
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_free
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
</UL>

<P><STRONG><a name="[7c]"></a>CALIBRATION_loop</STRONG> (Thumb, 1552 bytes, Stack size 56 bytes, calibration.o(i.CALIBRATION_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CALIBRATION_loop &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_to_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_update_current_ctrl_gain
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_calib_report
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[85]"></a>CALIBRATION_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, calibration.o(i.CALIBRATION_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CALIBRATION_start &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_malloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_state
</UL>

<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; CAN_receive_callback &rArr; parse_frame &rArr; USR_CONFIG_save_cogging_map &rArr; USR_CONFIG_erease_cogging_map &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CAN_anticogging_report</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, can.o(i.CAN_anticogging_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_anticogging_report &rArr; int32_to_data
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_loop
</UL>

<P><STRONG><a name="[80]"></a>CAN_calib_report</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, can.o(i.CAN_calib_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_calib_report &rArr; int32_to_data
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[91]"></a>CAN_comm_loop</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, can.o(i.CAN_comm_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_comm_loop &rArr; MCT_set_state &rArr; FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
</UL>

<P><STRONG><a name="[87]"></a>CAN_receive_callback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, can.o(i.CAN_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_receive_callback &rArr; parse_frame &rArr; USR_CONFIG_save_cogging_map &rArr; USR_CONFIG_erease_cogging_map &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>CAN_reset_rx_timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(i.CAN_reset_rx_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[113]"></a>CAN_reset_tx_timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(i.CAN_reset_tx_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
</UL>

<P><STRONG><a name="[120]"></a>CAN_set_node_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.CAN_set_node_id))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>CAN_tx_statusword</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, can.o(i.CAN_tx_statusword))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_tx_statusword &rArr; uint32_to_data
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
</UL>

<P><STRONG><a name="[97]"></a>CONTROLLER_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, controller.o(i.CONTROLLER_init))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_update_input_pos_filter_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>CONTROLLER_loop</STRONG> (Thumb, 1132 bytes, Stack size 56 bytes, controller.o(i.CONTROLLER_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CONTROLLER_loop &rArr; TRAJ_plan &rArr; __hardfp_fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_plan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_eval
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nearbyintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[9e]"></a>CONTROLLER_reset</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, controller.o(i.CONTROLLER_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CONTROLLER_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_state
</UL>

<P><STRONG><a name="[9f]"></a>CONTROLLER_set_home</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, controller.o(i.CONTROLLER_set_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CONTROLLER_set_home
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[a0]"></a>CONTROLLER_sync_callback</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, controller.o(i.CONTROLLER_sync_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CONTROLLER_sync_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[98]"></a>CONTROLLER_update_input_pos_filter_gain</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, controller.o(i.CONTROLLER_update_input_pos_filter_gain))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
</UL>

<P><STRONG><a name="[a1]"></a>DFU_check_app_back</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dfu.o(i.DFU_check_app_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DFU_check_app_back &rArr; USR_CONFIG_erease_config &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[127]"></a>DFU_jump_bootloader</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dfu.o(i.DFU_jump_bootloader))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[a5]"></a>DFU_write_app_back</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfu.o(i.DFU_write_app_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DFU_write_app_back &rArr; write_app_back &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_app_back
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[a7]"></a>DFU_write_app_back_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dfu.o(i.DFU_write_app_back_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DFU_write_app_back_start &rArr; erase_app_back &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_app_back
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>ENCODER_init</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, encoder.o(i.ENCODER_init))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>ENCODER_loop</STRONG> (Thumb, 866 bytes, Stack size 56 bytes, encoder.o(i.ENCODER_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ENCODER_loop &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[af]"></a>ENCODER_sample</STRONG> (Thumb, 504 bytes, Stack size 12 bytes, encoder.o(i.ENCODER_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ENCODER_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_loop
</UL>

<P><STRONG><a name="[78]"></a>Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[b1]"></a>FOC_arm</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, foc.o(i.FOC_arm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_arm &rArr; PWMC_TurnOnLowSides
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
</UL>

<P><STRONG><a name="[9d]"></a>FOC_current</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, foc.o(i.FOC_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FOC_current &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_park
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke_transform
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
</UL>

<P><STRONG><a name="[71]"></a>FOC_disarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, foc.o(i.FOC_disarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_end
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_end
</UL>

<P><STRONG><a name="[b8]"></a>FOC_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, foc.o(i.FOC_init))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_update_current_ctrl_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>FOC_update_current_ctrl_gain</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, foc.o(i.FOC_update_current_ctrl_gain))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[7d]"></a>FOC_voltage</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, foc.o(i.FOC_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FOC_voltage &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_park
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke_transform
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[7a]"></a>HEAP_free</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap.o(i.HEAP_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HEAP_free &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_end
</UL>

<P><STRONG><a name="[86]"></a>HEAP_malloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, heap.o(i.HEAP_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_cogging_map
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_start
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>MCT_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_task.o(i.MCT_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_sync_callback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_set_home
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
</UL>

<P><STRONG><a name="[62]"></a>MCT_high_frequency_task</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, mc_task.o(i.MCT_high_frequency_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MCT_high_frequency_task &rArr; CALIBRATION_loop &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_state
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_loop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>MCT_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mc_task.o(i.MCT_init))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>MCT_low_priority_task</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mc_task.o(i.MCT_low_priority_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCT_low_priority_task &rArr; CAN_comm_loop &rArr; MCT_set_state &rArr; FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_act_loop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_tx_statusword
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_comm_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>MCT_reset_error</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_task.o(i.MCT_reset_error))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[ed]"></a>MCT_safety_task</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mc_task.o(i.MCT_safety_task))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>MCT_set_state</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mc_task.o(i.MCT_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCT_set_state &rArr; FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_arm
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_comm_loop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_loop
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>PWMC_CurrentReadingPolarization</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, pwm_curr.o(i.PWMC_CurrentReadingPolarization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMC_CurrentReadingPolarization
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, pwm_curr.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_complementary_output_state_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
</UL>

<P><STRONG><a name="[7e]"></a>PWMC_TurnOnLowSides</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pwm_curr.o(i.PWMC_TurnOnLowSides))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_TurnOnLowSides
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_complementary_output_state_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_arm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[cd]"></a>PWMC_init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, pwm_curr.o(i.PWMC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWMC_init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_repetition_value_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_complementary_output_state_config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_periph_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_disable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_gd32c10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32c10x_it.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_safety_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TRAJ_eval</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, traptraj.o(i.TRAJ_eval))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
</UL>

<P><STRONG><a name="[9b]"></a>TRAJ_plan</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, traptraj.o(i.TRAJ_plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TRAJ_plan &rArr; __hardfp_fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
</UL>

<P><STRONG><a name="[f2]"></a>UART0_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.UART0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>USR_CONFIG_erease_cogging_map</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usr_config.o(i.USR_CONFIG_erease_cogging_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USR_CONFIG_erease_cogging_map &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_check_app_back
</UL>

<P><STRONG><a name="[a3]"></a>USR_CONFIG_erease_config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usr_config.o(i.USR_CONFIG_erease_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USR_CONFIG_erease_config &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_check_app_back
</UL>

<P><STRONG><a name="[7b]"></a>USR_CONFIG_read_cogging_map</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usr_config.o(i.USR_CONFIG_read_cogging_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USR_CONFIG_read_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_malloc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_end
</UL>

<P><STRONG><a name="[ff]"></a>USR_CONFIG_read_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usr_config.o(i.USR_CONFIG_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USR_CONFIG_read_config &rArr; crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>USR_CONFIG_save_cogging_map</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usr_config.o(i.USR_CONFIG_save_cogging_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USR_CONFIG_save_cogging_map &rArr; USR_CONFIG_erease_cogging_map &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[102]"></a>USR_CONFIG_save_config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usr_config.o(i.USR_CONFIG_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USR_CONFIG_save_config &rArr; USR_CONFIG_erease_config &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[72]"></a>USR_CONFIG_set_default_cogging_map</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usr_config.o(i.USR_CONFIG_set_default_cogging_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USR_CONFIG_set_default_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_end
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_end
</UL>

<P><STRONG><a name="[11e]"></a>USR_CONFIG_set_default_config</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, usr_config.o(i.USR_CONFIG_set_default_config))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13c]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[11f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>__hardfp_fmax</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fmax.o(i.__hardfp_fmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_plan
</UL>

<P><STRONG><a name="[74]"></a>__hardfp_nearbyintf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nearbyintf.o(i.__hardfp_nearbyintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_nearbyintf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_loop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_loop
</UL>

<P><STRONG><a name="[84]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[b4]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAJ_plan
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[d2]"></a>adc_calibration_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[6a]"></a>adc_channel_length_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_channel_length_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[68]"></a>adc_data_alignment_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[64]"></a>adc_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32c10x_adc.o(i.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[69]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[d0]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[6d]"></a>adc_external_trigger_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[6c]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[6b]"></a>adc_inserted_channel_config</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, gd32c10x_adc.o(i.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[ce]"></a>adc_interrupt_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[d4]"></a>adc_interrupt_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[cf]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[65]"></a>adc_mode_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[6e]"></a>adc_regular_channel_config</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, gd32c10x_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[67]"></a>adc_resolution_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_resolution_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[d3]"></a>adc_software_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[66]"></a>adc_special_function_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32c10x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[8d]"></a>can1_filter_start_bank</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can1_filter_start_bank))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[8a]"></a>can_deinit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[111]"></a>can_error_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can_error_get))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_check
</UL>

<P><STRONG><a name="[112]"></a>can_filter_init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
</UL>

<P><STRONG><a name="[8e]"></a>can_filter_mask_mode_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gd32c10x_can.o(i.can_filter_mask_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[8c]"></a>can_init</STRONG> (Thumb, 396 bytes, Stack size 20 bytes, gd32c10x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[89]"></a>can_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[8f]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[8b]"></a>can_struct_para_init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
</UL>

<P><STRONG><a name="[110]"></a>can_transmission_stop</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can_transmission_stop))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_check
</UL>

<P><STRONG><a name="[b2]"></a>clarke_transform</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i.clarke_transform))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
</UL>

<P><STRONG><a name="[11d]"></a>cos_f32</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, util.o(i.cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_park
</UL>

<P><STRONG><a name="[a2]"></a>crc32</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, util.o(i.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_cogging_map
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_check_app_back
</UL>

<P><STRONG><a name="[124]"></a>data_to_float</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, util.o(i.data_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[115]"></a>data_to_int32</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, util.o(i.data_to_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data_to_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
</UL>

<P><STRONG><a name="[126]"></a>data_to_uint32</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, util.o(i.data_to_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data_to_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[d5]"></a>dbg_periph_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_dbg.o(i.dbg_periph_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[d1]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>dma_channel_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32c10x_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[ac]"></a>dma_circulation_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32c10x_dma.o(i.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[aa]"></a>dma_deinit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gd32c10x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[ab]"></a>dma_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gd32c10x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[7f]"></a>float_to_data</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, util.o(i.float_to_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = float_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[fb]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_app_back
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_app_back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
</UL>

<P><STRONG><a name="[fd]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_app_back
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_app_back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
</UL>

<P><STRONG><a name="[fc]"></a>fmc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32c10x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_app_back
</UL>

<P><STRONG><a name="[fa]"></a>fmc_unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_erease_cogging_map
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_app_back
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_app_back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
</UL>

<P><STRONG><a name="[101]"></a>fmc_word_program</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gd32c10x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_app_back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
</UL>

<P><STRONG><a name="[4d]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[106]"></a>fwdgt_config</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, gd32c10x_fwdgt.o(i.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCH_DOG_init
</UL>

<P><STRONG><a name="[123]"></a>fwdgt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_fwdgt.o(i.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[bd]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[bb]"></a>gpio_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gd32c10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[c1]"></a>gpio_pin_lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_pin_lock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_pins
</UL>

<P><STRONG><a name="[bc]"></a>gpio_pin_remap_config</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, gd32c10x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[82]"></a>int32_to_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, util.o(i.int32_to_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int32_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_anticogging_report
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_calib_report
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_loop
</UL>

<P><STRONG><a name="[b5]"></a>inverse_park</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, util.o(i.inverse_park))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inverse_park
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_f32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; MCT_low_priority_task &rArr; CAN_comm_loop &rArr; MCT_set_state &rArr; FOC_disarm &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_read_cogging_map
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingPolarization
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCODER_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_set_node_id
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCH_DOG_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_pins
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c7]"></a>nvic_priority_group_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32c10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_init
</UL>

<P><STRONG><a name="[e1]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b3]"></a>park_transform</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, util.o(i.park_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = park_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_f32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
</UL>

<P><STRONG><a name="[da]"></a>rcu_adc_clock_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_init
</UL>

<P><STRONG><a name="[12a]"></a>rcu_clock_freq_get</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, gd32c10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[128]"></a>rcu_flag_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[104]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCH_DOG_init
</UL>

<P><STRONG><a name="[105]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, gd32c10x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCH_DOG_init
</UL>

<P><STRONG><a name="[d9]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_init
</UL>

<P><STRONG><a name="[10f]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
</UL>

<P><STRONG><a name="[10e]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
</UL>

<P><STRONG><a name="[11c]"></a>sin_f32</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, util.o(i.sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_transform
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_park
</UL>

<P><STRONG><a name="[df]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
</UL>

<P><STRONG><a name="[dc]"></a>spi_i2s_deinit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gd32c10x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
</UL>

<P><STRONG><a name="[de]"></a>spi_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
</UL>

<P><STRONG><a name="[dd]"></a>spi_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
</UL>

<P><STRONG><a name="[b6]"></a>svm</STRONG> (Thumb, 484 bytes, Stack size 0 bytes, util.o(i.svm))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_current
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_voltage
</UL>

<P><STRONG><a name="[ec]"></a>timer_break_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_break_config))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[eb]"></a>timer_break_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_break_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[cc]"></a>timer_channel_complementary_output_state_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_complementary_output_state_config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[e7]"></a>timer_channel_output_config</STRONG> (Thumb, 474 bytes, Stack size 4 bytes, gd32c10x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[e9]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[e8]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[ea]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[cb]"></a>timer_channel_output_state_config</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_state_config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[e6]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[e3]"></a>timer_deinit</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, gd32c10x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[d6]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[c9]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[ca]"></a>timer_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[e5]"></a>timer_init</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, gd32c10x_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[f0]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[ef]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[b0]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[d7]"></a>timer_repetition_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_repetition_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_init
</UL>

<P><STRONG><a name="[e4]"></a>timer_struct_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_init
</UL>

<P><STRONG><a name="[96]"></a>uint32_to_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, util.o(i.uint32_to_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint32_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_tx_statusword
</UL>

<P><STRONG><a name="[f6]"></a>usart_baudrate_set</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd32c10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[11a]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f3]"></a>usart_deinit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, gd32c10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[f9]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[11b]"></a>usart_flag_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f7]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[f5]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[f8]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>

<P><STRONG><a name="[f4]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>ADC0_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, main.o(i.ADC0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0_init &rArr; adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>ADC1_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.ADC1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_init &rArr; adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>CAN0_init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, main.o(i.CAN0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN0_init &rArr; can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>DMA0_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(i.DMA0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_init &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, main.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>LOCK_pins</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, main.o(i.LOCK_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOCK_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>NVIC_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.NVIC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>RCU_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(i.RCU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCU_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>SPI0_init</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, main.o(i.SPI0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI0_init &rArr; spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>TIMER0_init</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, main.o(i.TIMER0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMER0_init &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_break_struct_para_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_break_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>TIMER1_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, main.o(i.TIMER1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_init &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>WATCH_DOG_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.WATCH_DOG_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WATCH_DOG_init &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>enter_state</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mc_task.o(i.enter_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = enter_state &rArr; CALIBRATION_start &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_start
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[c2]"></a>exit_state</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mc_task.o(i.exit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = exit_state &rArr; CALIBRATION_end &rArr; USR_CONFIG_read_cogging_map &rArr; HEAP_malloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_disarm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset_tx_timeout
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset_rx_timeout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIBRATION_end
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANTICOGGING_end
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_high_frequency_task
</UL>

<P><STRONG><a name="[c5]"></a>led_act_loop</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, mc_task.o(i.led_act_loop))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_low_priority_task
</UL>

<P><STRONG><a name="[bf]"></a>prvHeapInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, heap.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_malloc
</UL>

<P><STRONG><a name="[be]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, heap.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_malloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEAP_free
</UL>

<P><STRONG><a name="[92]"></a>can_error_check</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, can.o(i.can_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmission_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_comm_loop
</UL>

<P><STRONG><a name="[93]"></a>can_rx</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, can.o(i.can_rx))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive_callback
</UL>

<P><STRONG><a name="[90]"></a>can_tx</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, can.o(i.can_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset_tx_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_anticogging_report
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_calib_report
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_tx_statusword
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_comm_loop
</UL>

<P><STRONG><a name="[114]"></a>config_callback</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, can.o(i.config_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_callback &rArr; int32_to_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_update_input_pos_filter_gain
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_int32
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_to_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_update_current_ctrl_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame
</UL>

<P><STRONG><a name="[94]"></a>parse_frame</STRONG> (Thumb, 1278 bytes, Stack size 16 bytes, can.o(i.parse_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = parse_frame &rArr; USR_CONFIG_save_cogging_map &rArr; USR_CONFIG_erease_cogging_map &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_get_state
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_sync_callback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONTROLLER_set_home
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_set_default_cogging_map
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_set_state
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_uint32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_float
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_CONFIG_save_cogging_map
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_app_back_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_app_back
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_jump_bootloader
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_check_app_back
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_callback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_to_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset_rx_timeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCT_reset_error
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive_callback
</UL>

<P><STRONG><a name="[a8]"></a>erase_app_back</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfu.o(i.erase_app_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_app_back &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_app_back_start
</UL>

<P><STRONG><a name="[a6]"></a>write_app_back</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfu.o(i.write_app_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_app_back &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_app_back
</UL>

<P><STRONG><a name="[116]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32c10x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>

<P><STRONG><a name="[118]"></a>fmc_ready_wait</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32c10x_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[119]"></a>fmc_state_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[129]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, system_gd32c10x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e0]"></a>system_clock_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_gd32c10x.o(i.system_clock_config))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[108]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
